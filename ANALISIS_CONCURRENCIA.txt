Analisis - Posibles condiciones de carrera

1. Añadir nuevos planos (POST /blueprints)

Si dos clientes intentan registrar un plano con el mismo nombre y autor al mismo tiempo, puede pasar que:
    - Ambos revisen si el plano existe y no lo encuentren.
    - Ambos intenten guardarlo.
    - Se termine sobrescribiendo el mismo plano o lanzando errores inconsistentes.

2. Actualizar planos (PUT /blueprints/{author}/{bpname})

Si varios clientes actualizan el mismo plano simultáneamente:
    - Se puede perder información si una actualización sobrescribe otra.
    - Puede haber lecturas inconsistentes de los puntos del plano.

3. Consultar todos los planos (GET /blueprints)

No es un problema grave por sí solo, pero si ocurre una consulta mientras otro hilo está actualizando un plano, puede
devolver datos parcialmente actualizados o inconsistentes.


Regiones Críticas Identificadas

Las regiones críticas son las partes del código donde pueden ocurrir conflictos entre hilos.

saveBlueprint() → Accede y modifica blueprints (estructura de datos compartida).
getBlueprint() → Accede a blueprints, y si se usa en combinación con saveBlueprint() sin control, puede provocar
datos inconsistentes.
updateBlueprint() → Modifica los puntos de un plano ya existente, lo que puede generar sobrescritura de datos en
concurrencia.


Solución Aplicada

1. Usar ConcurrentHashMap en lugar de HashMap ya que permite múltiples lecturas simultáneas sin bloquear, pero garantiza
seguridad al escribir. Modificamos InMemoryBlueprintPersistence para usar ConcurrentHashMap

2. Para evitar que dos hilos creen el mismo plano al mismo tiempo, usamos putIfAbsent() en ConcurrentHashMap que es un
método de ConcurrentHashMap en Java que agrega un valor a la colección solo si la clave no existe ya.

3. Para las lecturas seguras, ConcurrentHashMap ya permite lecturas seguras sin bloqueos, así que no necesitamos cambios
en getBlueprint().